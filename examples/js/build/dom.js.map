{"version":3,"sources":["../../src/lib/loadImage.ts","../../src/lib/Bounds.ts","../../src/shatter.ts","../../node_modules/d3-voronoi/src/constant.js","../../node_modules/d3-voronoi/src/point.js","../../node_modules/d3-voronoi/src/RedBlackTree.js","../../node_modules/d3-voronoi/src/Edge.js","../../node_modules/d3-voronoi/src/Cell.js","../../node_modules/d3-voronoi/src/Circle.js","../../node_modules/d3-voronoi/src/Beach.js","../../node_modules/d3-voronoi/src/Diagram.js","../../node_modules/d3-voronoi/src/voronoi.js","../../node_modules/d3-voronoi/src/index.js","../../src/generators/voronoi.ts","../../src/index.ts","dom.js"],"names":["x","d","y","RedBlackTree","_","RedBlackNode","node","U","C","L","R","P","N","RedBlackRotateLeft","tree","p","q","parent","RedBlackRotateRight","RedBlackFirst","prototype","constructor","insert","after","grandpa","uncle","remove","sibling","next","red","left","right","createEdge","v0","v1","edge","index","edges","push","setEdgeEnd","halfedges","createBorderEdge","vertex","clipEdge","x0","y0","x1","y1","a","r","b","ax","ay","t0","t1","dx","dy","connectEdge","fm","fb","lx","ly","rx","ry","fx","fy","clipEdges","i","length","Math","abs","epsilon","createCell","site","cells","cellHalfedgeAngle","cell","va","vb","atan2","cellHalfedgeStart","cellHalfedgeEnd","sortCellHalfedges","j","m","n","Array","array","sort","clipCells","nCells","iCell","iHalfedge","nHalfedges","start","startX","startY","end","endX","endY","cover","splice","d2","dc","Infinity","v00","v01","v11","v10","firstCircle","circlePool","Circle","arc","cy","attachCircle","lArc","rArc","lSite","cSite","rSite","bx","by","cx","epsilon2","ha","hc","circle","pop","sqrt","before","circles","detachCircle","beachPool","Beach","createBeach","beach","detachBeach","removeBeach","previous","disappearing","unshift","nArcs","iArc","addBeach","dxl","dxr","directrix","beaches","leftBreakPoint","rightBreakPoint","newArc","hb","rfocx","rfocy","pby2","lfocx","lfocy","plby2","hl","aby2","triangleArea","c","lexicographic","Diagram","sites","extent","polygons","map","polygon","data","triangles","forEach","s0","e1","s1","links","filter","source","target","find","radius","that","i0","i1","_found","e","v","vx","vy","v2","pointX","pointY","voronoi","s","round","arguments","size","run","exImagePath","originalImageContainer","document","querySelector","original","appendChild","pieceMargin","wrap","assembled","shatterExImage","num","firstChild","voropieces","height","width","numPieces","vshatter","Shatter","setPieces","results","shatter","style","position","res","image","marginRight","clone","cloneNode","setAttribute","addEventListener","event","preventDefault","pieces","elements","value","NaN","Number"],"mappings":"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","file":"dom.js","sourceRoot":"..","sourcesContent":["export default async function loadImage(url: string) {\n    const img = document.createElement('img');\n\n    return new Promise<HTMLImageElement>((resolve, reject) => {\n        img.onload = () => resolve(img);\n        img.onerror = reject;\n        img.src = url;\n    });\n}\n","import { Coordinate } from '../shatter';\n\ntype Bound = {\n    min: number;\n    max: number;\n};\n\nexport default class Bounds {\n    x: Bound = { min: 0, max: 0 };\n    y: Bound = { min: 0, max: 0 };\n\n    constructor(coord: Coordinate) {\n        this.x.min = this.x.max = coord[0];\n        this.y.min = this.y.max = coord[1];\n    }\n\n    update(coord: Coordinate) {\n        if (coord[0] > this.x.max) {\n            this.x.max = coord[0];\n        }\n        if (coord[0] < this.x.min) {\n            this.x.min = coord[0];\n        }\n        if (coord[1] > this.y.max) {\n            this.y.max = coord[1];\n        }\n        if (coord[1] < this.y.min) {\n            this.y.min = coord[1];\n        }\n    }\n}\n","import loadImage from './lib/loadImage';\nimport Bounds from './lib/Bounds';\n\nexport type Coordinate = [number, number];\n\nexport type Piece = Coordinate[];\n\ntype ShatteredImage = {\n    image: HTMLImageElement;\n    x: number;\n    y: number;\n};\n\nclass Shatter {\n    url: string = '';\n    originalImage: HTMLImageElement | undefined;\n    pieces: Piece[] = [];\n    images: ShatteredImage[] = [];\n\n    constructor(url?: string) {\n        this.url = url ? url : '';\n    }\n\n    setImage(img: HTMLImageElement) {\n        this.originalImage = img;\n    }\n\n    setPieces(pieces: Piece[]) {\n        this.pieces = pieces;\n    }\n\n    async shatter() {\n        if (!this.originalImage) {\n            try {\n                this.originalImage = await loadImage(this.url);\n            } catch (e) {\n                console.error(e);\n                return;\n            }\n        }\n\n        const results = this.pieces.map(async (piece) => {\n            return new Promise<ShatteredImage>(async (res, rej) => {\n                if (!this.originalImage) {\n                    rej('Image not set');\n                }\n\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = this.originalImage?.width ?? 0;\n                tempCanvas.height = this.originalImage?.height ?? 0;\n                const tempCtx = tempCanvas.getContext('2d');\n                const pieceBounds = new Bounds(piece[0]);\n\n                for (let i = 0; i < piece.length; i++) {\n                    if (i === 0) {\n                        tempCtx?.beginPath();\n                        tempCtx?.moveTo(piece[i][0], piece[i][1]);\n                        continue;\n                    }\n\n                    tempCtx?.lineTo(piece[i][0], piece[i][1]);\n\n                    if (i === piece.length - 1) {\n                        tempCtx?.lineTo(piece[0][0], piece[0][1]);\n                    }\n\n                    pieceBounds.update(piece[i]);\n                }\n\n                tempCtx?.clip();\n                tempCtx?.drawImage(this.originalImage ?? new Image(), 0, 0);\n\n                let clippedImage = await loadImage(tempCanvas.toDataURL('image/png'));\n\n                tempCtx?.clearRect(0, 0, tempCanvas.width, tempCanvas.height);\n\n                tempCanvas.height = pieceBounds.y.max - pieceBounds.y.min;\n                tempCanvas.width = pieceBounds.x.max - pieceBounds.x.min;\n                tempCtx?.drawImage(clippedImage, -pieceBounds.x.min, -pieceBounds.y.min);\n                let croppedImage = await loadImage(tempCanvas.toDataURL('image/png'));\n\n                res({\n                    image: croppedImage,\n                    x: pieceBounds.x.min,\n                    y: pieceBounds.y.min,\n                });\n            });\n        });\n\n        this.images = await Promise.all(results);\n\n        return Promise.resolve(this.images);\n    }\n}\n\nexport default Shatter;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export function x(d) {\n  return d[0];\n}\n\nexport function y(d) {\n  return d[1];\n}\n","function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nexport default RedBlackTree;\n","import {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createEdge(left, right, v0, v1) {\n  var edge = [null, null],\n      index = edges.push(edge) - 1;\n  edge.left = left;\n  edge.right = right;\n  if (v0) setEdgeEnd(edge, left, right, v0);\n  if (v1) setEdgeEnd(edge, right, left, v1);\n  cells[left.index].halfedges.push(index);\n  cells[right.index].halfedges.push(index);\n  return edge;\n}\n\nexport function createBorderEdge(left, v0, v1) {\n  var edge = [v0, v1];\n  edge.left = left;\n  return edge;\n}\n\nexport function setEdgeEnd(edge, left, right, vertex) {\n  if (!edge[0] && !edge[1]) {\n    edge[0] = vertex;\n    edge.left = left;\n    edge.right = right;\n  } else if (edge.left === right) {\n    edge[1] = vertex;\n  } else {\n    edge[0] = vertex;\n  }\n}\n\n// Liang–Barsky line clipping.\nfunction clipEdge(edge, x0, y0, x1, y1) {\n  var a = edge[0],\n      b = edge[1],\n      ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?\n\n  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];\n  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];\n  return true;\n}\n\nfunction connectEdge(edge, x0, y0, x1, y1) {\n  var v1 = edge[1];\n  if (v1) return true;\n\n  var v0 = edge[0],\n      left = edge.left,\n      right = edge.right,\n      lx = left[0],\n      ly = left[1],\n      rx = right[0],\n      ry = right[1],\n      fx = (lx + rx) / 2,\n      fy = (ly + ry) / 2,\n      fm,\n      fb;\n\n  if (ry === ly) {\n    if (fx < x0 || fx >= x1) return;\n    if (lx > rx) {\n      if (!v0) v0 = [fx, y0];\n      else if (v0[1] >= y1) return;\n      v1 = [fx, y1];\n    } else {\n      if (!v0) v0 = [fx, y1];\n      else if (v0[1] < y0) return;\n      v1 = [fx, y0];\n    }\n  } else {\n    fm = (lx - rx) / (ry - ly);\n    fb = fy - fm * fx;\n    if (fm < -1 || fm > 1) {\n      if (lx > rx) {\n        if (!v0) v0 = [(y0 - fb) / fm, y0];\n        else if (v0[1] >= y1) return;\n        v1 = [(y1 - fb) / fm, y1];\n      } else {\n        if (!v0) v0 = [(y1 - fb) / fm, y1];\n        else if (v0[1] < y0) return;\n        v1 = [(y0 - fb) / fm, y0];\n      }\n    } else {\n      if (ly < ry) {\n        if (!v0) v0 = [x0, fm * x0 + fb];\n        else if (v0[0] >= x1) return;\n        v1 = [x1, fm * x1 + fb];\n      } else {\n        if (!v0) v0 = [x1, fm * x1 + fb];\n        else if (v0[0] < x0) return;\n        v1 = [x0, fm * x0 + fb];\n      }\n    }\n  }\n\n  edge[0] = v0;\n  edge[1] = v1;\n  return true;\n}\n\nexport function clipEdges(x0, y0, x1, y1) {\n  var i = edges.length,\n      edge;\n\n  while (i--) {\n    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)\n        || !clipEdge(edge, x0, y0, x1, y1)\n        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon\n            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {\n      delete edges[i];\n    }\n  }\n}\n","import {createBorderEdge} from \"./Edge\";\nimport {cells, edges, epsilon} from \"./Diagram\";\n\nexport function createCell(site) {\n  return cells[site.index] = {\n    site: site,\n    halfedges: []\n  };\n}\n\nfunction cellHalfedgeAngle(cell, edge) {\n  var site = cell.site,\n      va = edge.left,\n      vb = edge.right;\n  if (site === vb) vb = va, va = site;\n  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);\n  if (site === va) va = edge[1], vb = edge[0];\n  else va = edge[0], vb = edge[1];\n  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);\n}\n\nexport function cellHalfedgeStart(cell, edge) {\n  return edge[+(edge.left !== cell.site)];\n}\n\nexport function cellHalfedgeEnd(cell, edge) {\n  return edge[+(edge.left === cell.site)];\n}\n\nexport function sortCellHalfedges() {\n  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {\n    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {\n      var index = new Array(m),\n          array = new Array(m);\n      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);\n      index.sort(function(i, j) { return array[j] - array[i]; });\n      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];\n      for (j = 0; j < m; ++j) halfedges[j] = array[j];\n    }\n  }\n}\n\nexport function clipCells(x0, y0, x1, y1) {\n  var nCells = cells.length,\n      iCell,\n      cell,\n      site,\n      iHalfedge,\n      halfedges,\n      nHalfedges,\n      start,\n      startX,\n      startY,\n      end,\n      endX,\n      endY,\n      cover = true;\n\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      site = cell.site;\n      halfedges = cell.halfedges;\n      iHalfedge = halfedges.length;\n\n      // Remove any dangling clipped edges.\n      while (iHalfedge--) {\n        if (!edges[halfedges[iHalfedge]]) {\n          halfedges.splice(iHalfedge, 1);\n        }\n      }\n\n      // Insert any border edges as necessary.\n      iHalfedge = 0, nHalfedges = halfedges.length;\n      while (iHalfedge < nHalfedges) {\n        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];\n        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];\n        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {\n          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,\n              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]\n              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]\n              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]\n              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]\n              : null)) - 1);\n          ++nHalfedges;\n        }\n      }\n\n      if (nHalfedges) cover = false;\n    }\n  }\n\n  // If there weren’t any edges, have the closest site cover the extent.\n  // It doesn’t matter which corner of the extent we measure!\n  if (cover) {\n    var dx, dy, d2, dc = Infinity;\n\n    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {\n      if (cell = cells[iCell]) {\n        site = cell.site;\n        dx = site[0] - x0;\n        dy = site[1] - y0;\n        d2 = dx * dx + dy * dy;\n        if (d2 < dc) dc = d2, cover = cell;\n      }\n    }\n\n    if (cover) {\n      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];\n      cover.halfedges.push(\n        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,\n        edges.push(createBorderEdge(site, v01, v11)) - 1,\n        edges.push(createBorderEdge(site, v11, v10)) - 1,\n        edges.push(createBorderEdge(site, v10, v00)) - 1\n      );\n    }\n  }\n\n  // Lastly delete any cells with no edges; these were entirely clipped.\n  for (iCell = 0; iCell < nCells; ++iCell) {\n    if (cell = cells[iCell]) {\n      if (!cell.halfedges.length) {\n        delete cells[iCell];\n      }\n    }\n  }\n}\n","import {RedBlackNode} from \"./RedBlackTree\";\nimport {circles, epsilon2} from \"./Diagram\";\n\nvar circlePool = [];\n\nexport var firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x =\n  this.y =\n  this.arc =\n  this.site =\n  this.cy = null;\n}\n\nexport function attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle;\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n      if (node.L) node = node.L;\n      else { before = node.P; break; }\n    } else {\n      if (node.R) node = node.R;\n      else { before = node; break; }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nexport function detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n","import {RedBlackNode} from \"./RedBlackTree\";\nimport {createCell} from \"./Cell\";\nimport {attachCircle, detachCircle} from \"./Circle\";\nimport {createEdge, setEdgeEnd} from \"./Edge\";\nimport {beaches, epsilon} from \"./Diagram\";\n\nvar beachPool = [];\n\nfunction Beach() {\n  RedBlackNode(this);\n  this.edge =\n  this.site =\n  this.circle = null;\n}\n\nfunction createBeach(site) {\n  var beach = beachPool.pop() || new Beach;\n  beach.site = site;\n  return beach;\n}\n\nfunction detachBeach(beach) {\n  detachCircle(beach);\n  beaches.remove(beach);\n  beachPool.push(beach);\n  RedBlackNode(beach);\n}\n\nexport function removeBeach(beach) {\n  var circle = beach.circle,\n      x = circle.x,\n      y = circle.cy,\n      vertex = [x, y],\n      previous = beach.P,\n      next = beach.N,\n      disappearing = [beach];\n\n  detachBeach(beach);\n\n  var lArc = previous;\n  while (lArc.circle\n      && Math.abs(x - lArc.circle.x) < epsilon\n      && Math.abs(y - lArc.circle.cy) < epsilon) {\n    previous = lArc.P;\n    disappearing.unshift(lArc);\n    detachBeach(lArc);\n    lArc = previous;\n  }\n\n  disappearing.unshift(lArc);\n  detachCircle(lArc);\n\n  var rArc = next;\n  while (rArc.circle\n      && Math.abs(x - rArc.circle.x) < epsilon\n      && Math.abs(y - rArc.circle.cy) < epsilon) {\n    next = rArc.N;\n    disappearing.push(rArc);\n    detachBeach(rArc);\n    rArc = next;\n  }\n\n  disappearing.push(rArc);\n  detachCircle(rArc);\n\n  var nArcs = disappearing.length,\n      iArc;\n  for (iArc = 1; iArc < nArcs; ++iArc) {\n    rArc = disappearing[iArc];\n    lArc = disappearing[iArc - 1];\n    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);\n  }\n\n  lArc = disappearing[0];\n  rArc = disappearing[nArcs - 1];\n  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);\n\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nexport function addBeach(site) {\n  var x = site[0],\n      directrix = site[1],\n      lArc,\n      rArc,\n      dxl,\n      dxr,\n      node = beaches._;\n\n  while (node) {\n    dxl = leftBreakPoint(node, directrix) - x;\n    if (dxl > epsilon) node = node.L; else {\n      dxr = x - rightBreakPoint(node, directrix);\n      if (dxr > epsilon) {\n        if (!node.R) {\n          lArc = node;\n          break;\n        }\n        node = node.R;\n      } else {\n        if (dxl > -epsilon) {\n          lArc = node.P;\n          rArc = node;\n        } else if (dxr > -epsilon) {\n          lArc = node;\n          rArc = node.N;\n        } else {\n          lArc = rArc = node;\n        }\n        break;\n      }\n    }\n  }\n\n  createCell(site);\n  var newArc = createBeach(site);\n  beaches.insert(lArc, newArc);\n\n  if (!lArc && !rArc) return;\n\n  if (lArc === rArc) {\n    detachCircle(lArc);\n    rArc = createBeach(lArc.site);\n    beaches.insert(newArc, rArc);\n    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);\n    attachCircle(lArc);\n    attachCircle(rArc);\n    return;\n  }\n\n  if (!rArc) { // && lArc\n    newArc.edge = createEdge(lArc.site, newArc.site);\n    return;\n  }\n\n  // else lArc !== rArc\n  detachCircle(lArc);\n  detachCircle(rArc);\n\n  var lSite = lArc.site,\n      ax = lSite[0],\n      ay = lSite[1],\n      bx = site[0] - ax,\n      by = site[1] - ay,\n      rSite = rArc.site,\n      cx = rSite[0] - ax,\n      cy = rSite[1] - ay,\n      d = 2 * (bx * cy - by * cx),\n      hb = bx * bx + by * by,\n      hc = cx * cx + cy * cy,\n      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];\n\n  setEdgeEnd(rArc.edge, lSite, rSite, vertex);\n  newArc.edge = createEdge(lSite, site, null, vertex);\n  rArc.edge = createEdge(site, rSite, null, vertex);\n  attachCircle(lArc);\n  attachCircle(rArc);\n}\n\nfunction leftBreakPoint(arc, directrix) {\n  var site = arc.site,\n      rfocx = site[0],\n      rfocy = site[1],\n      pby2 = rfocy - directrix;\n\n  if (!pby2) return rfocx;\n\n  var lArc = arc.P;\n  if (!lArc) return -Infinity;\n\n  site = lArc.site;\n  var lfocx = site[0],\n      lfocy = site[1],\n      plby2 = lfocy - directrix;\n\n  if (!plby2) return lfocx;\n\n  var hl = lfocx - rfocx,\n      aby2 = 1 / pby2 - 1 / plby2,\n      b = hl / plby2;\n\n  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;\n\n  return (rfocx + lfocx) / 2;\n}\n\nfunction rightBreakPoint(arc, directrix) {\n  var rArc = arc.N;\n  if (rArc) return leftBreakPoint(rArc, directrix);\n  var site = arc.site;\n  return site[1] === directrix ? site[0] : Infinity;\n}\n","import {addBeach, removeBeach} from \"./Beach\";\nimport {sortCellHalfedges, cellHalfedgeStart, clipCells} from \"./Cell\";\nimport {firstCircle} from \"./Circle\";\nimport {clipEdges} from \"./Edge\";\nimport RedBlackTree from \"./RedBlackTree\";\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var beaches;\nexport var cells;\nexport var circles;\nexport var edges;\n\nfunction triangleArea(a, b, c) {\n  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);\n}\n\nfunction lexicographic(a, b) {\n  return b[1] - a[1]\n      || b[0] - a[0];\n}\n\nexport default function Diagram(sites, extent) {\n  var site = sites.sort(lexicographic).pop(),\n      x,\n      y,\n      circle;\n\n  edges = [];\n  cells = new Array(sites.length);\n  beaches = new RedBlackTree;\n  circles = new RedBlackTree;\n\n  while (true) {\n    circle = firstCircle;\n    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {\n      if (site[0] !== x || site[1] !== y) {\n        addBeach(site);\n        x = site[0], y = site[1];\n      }\n      site = sites.pop();\n    } else if (circle) {\n      removeBeach(circle.arc);\n    } else {\n      break;\n    }\n  }\n\n  sortCellHalfedges();\n\n  if (extent) {\n    var x0 = +extent[0][0],\n        y0 = +extent[0][1],\n        x1 = +extent[1][0],\n        y1 = +extent[1][1];\n    clipEdges(x0, y0, x1, y1);\n    clipCells(x0, y0, x1, y1);\n  }\n\n  this.edges = edges;\n  this.cells = cells;\n\n  beaches =\n  circles =\n  edges =\n  cells = null;\n}\n\nDiagram.prototype = {\n  constructor: Diagram,\n\n  polygons: function() {\n    var edges = this.edges;\n\n    return this.cells.map(function(cell) {\n      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });\n      polygon.data = cell.site.data;\n      return polygon;\n    });\n  },\n\n  triangles: function() {\n    var triangles = [],\n        edges = this.edges;\n\n    this.cells.forEach(function(cell, i) {\n      if (!(m = (halfedges = cell.halfedges).length)) return;\n      var site = cell.site,\n          halfedges,\n          j = -1,\n          m,\n          s0,\n          e1 = edges[halfedges[m - 1]],\n          s1 = e1.left === site ? e1.right : e1.left;\n\n      while (++j < m) {\n        s0 = s1;\n        e1 = edges[halfedges[j]];\n        s1 = e1.left === site ? e1.right : e1.left;\n        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {\n          triangles.push([site.data, s0.data, s1.data]);\n        }\n      }\n    });\n\n    return triangles;\n  },\n\n  links: function() {\n    return this.edges.filter(function(edge) {\n      return edge.right;\n    }).map(function(edge) {\n      return {\n        source: edge.left.data,\n        target: edge.right.data\n      };\n    });\n  },\n\n  find: function(x, y, radius) {\n    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;\n\n    // Use the previously-found cell, or start with an arbitrary one.\n    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;\n    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;\n\n    // Traverse the half-edges to find a closer cell, if any.\n    do {\n      cell = that.cells[i0 = i1], i1 = null;\n      cell.halfedges.forEach(function(e) {\n        var edge = that.edges[e], v = edge.left;\n        if ((v === cell.site || !v) && !(v = edge.right)) return;\n        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;\n        if (v2 < d2) d2 = v2, i1 = v.index;\n      });\n    } while (i1 !== null);\n\n    that._found = i0;\n\n    return radius == null || d2 <= radius * radius ? cell.site : null;\n  }\n}\n","import constant from \"./constant\";\nimport {x as pointX, y as pointY} from \"./point\";\nimport Diagram, {epsilon} from \"./Diagram\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      extent = null;\n\n  function voronoi(data) {\n    return new Diagram(data.map(function(d, i) {\n      var s = [Math.round(x(d, i, data) / epsilon) * epsilon, Math.round(y(d, i, data) / epsilon) * epsilon];\n      s.index = i;\n      s.data = d;\n      return s;\n    }), extent);\n  }\n\n  voronoi.polygons = function(data) {\n    return voronoi(data).polygons();\n  };\n\n  voronoi.links = function(data) {\n    return voronoi(data).links();\n  };\n\n  voronoi.triangles = function(data) {\n    return voronoi(data).triangles();\n  };\n\n  voronoi.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), voronoi) : x;\n  };\n\n  voronoi.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), voronoi) : y;\n  };\n\n  voronoi.extent = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];\n  };\n\n  voronoi.size = function(_) {\n    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];\n  };\n\n  return voronoi;\n}\n","export {default as voronoi} from \"./voronoi\";\n","import { Piece } from '../shatter';\nimport { voronoi } from 'd3-voronoi';\n\nexport default function VoronoiPieces({\n    height = 100,\n    width = 100,\n    numPieces = 4,\n}: {\n    height: number;\n    width: number;\n    numPieces: number;\n}): Piece[] {\n    const vertices: [number, number][] = Array(numPieces)\n        .fill([0, 0])\n        .map(() => {\n            return [Math.floor(Math.random() * width), Math.floor(Math.random() * height)];\n        });\n    const v = voronoi().extent([\n        [0, 0],\n        [width, height],\n    ]);\n\n    const pieces = v(vertices).polygons();\n\n    return pieces.map((piece) => {\n        return piece\n            .filter((point) => point !== piece['data'])\n            .map((point) => {\n                return [Math.ceil(point[0]), Math.ceil(point[1])];\n            });\n    });\n}\n","import Shatter from './shatter';\nimport VoronoiPieces from './generators/voronoi';\n\nexport { Shatter, VoronoiPieces };\n","import { Shatter, VoronoiPieces } from '../../src/index';\nimport loadImage from '../../src/lib/loadImage';\n\nasync function run() {\n    const exImagePath = '/img/BlueMarbleNasa.png';\n    const originalImageContainer = document.querySelector('.js-original');\n    const original = await loadImage(exImagePath);\n    originalImageContainer.appendChild(original);\n    const pieceMargin = '1rem';\n    let wrap = document.querySelector('.js-result');\n    let assembled = document.querySelector('.js-result-assembled');\n    const formEl = document.querySelector('form');\n\n    formEl.addEventListener('submit', (event) => {\n        event.preventDefault();\n        const pieces = event.target.elements?.pieces?.value;\n\n        if (pieces && Number(pieces) !== NaN) {\n            shatterExImage(Number(pieces));\n        }\n    });\n\n    async function shatterExImage(num = 10) {\n        while (wrap.firstChild) {\n            wrap.firstChild.remove();\n        }\n\n        while (assembled.firstChild) {\n            assembled.firstChild.remove();\n        }\n\n        const voropieces = VoronoiPieces({\n            height: original.width,\n            width: original.height,\n            numPieces: num,\n        });\n\n        const vshatter = new Shatter(exImagePath);\n        vshatter.setPieces(voropieces);\n        let results = await vshatter.shatter();\n\n        wrap.style.position = 'relative';\n\n        results.forEach((res, i) => {\n            res.image.style.marginRight = pieceMargin;\n            wrap.appendChild(res.image);\n\n            const clone = res.image.cloneNode();\n            clone.setAttribute('style', `position: absolute; top: ${res.y}px; left: ${res.x}px;`);\n            assembled.appendChild(clone);\n        });\n    }\n\n    shatterExImage();\n}\n\nrun();\n"]}